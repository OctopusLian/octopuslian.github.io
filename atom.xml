<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会飞的章鱼</title>
  <icon>https://octopuslian.github.io/icon.png</icon>
  <subtitle>熟能生巧，勤能补拙；念念不忘，必有回响。</subtitle>
  <link href="https://octopuslian.github.io/atom.xml" rel="self"/>
  
  <link href="https://octopuslian.github.io/"/>
  <updated>2022-10-07T04:13:16.423Z</updated>
  <id>https://octopuslian.github.io/</id>
  
  <author>
    <name>Neo Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go语言精进——了解map原理并高效使用</title>
    <link href="https://octopuslian.github.io/2022/10/07/book-go-programming-from-beginner-to-master-14/"/>
    <id>https://octopuslian.github.io/2022/10/07/book-go-programming-from-beginner-to-master-14/</id>
    <published>2022-10-07T14:51:12.000Z</published>
    <updated>2022-10-07T04:13:16.423Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是Map&quot;&gt;&lt;a href=&quot;#什么是Map&quot; class=&quot;headerlink&quot; title=&quot;什么是Map&quot;&gt;&lt;/a&gt;什么是Map&lt;/h1&gt;&lt;p&gt;map 是 Go 语言提供的一种抽象数据类型，它表示一组无序的键值对。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/07/book-go-programming-from-beginner-to-master-14/map1.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;的声明：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[key_type]value_type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="map" scheme="https://octopuslian.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解切片原理并高效使用</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-13/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-13/</id>
    <published>2022-10-06T14:51:07.000Z</published>
    <updated>2022-10-06T15:29:07.075Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是数组&quot;&gt;&lt;a href=&quot;#什么是数组&quot; class=&quot;headerlink&quot; title=&quot;什么是数组&quot;&gt;&lt;/a&gt;什么是数组&lt;/h1&gt;&lt;h2 id=&quot;数组有哪些基本特性&quot;&gt;&lt;a href=&quot;#数组有哪些基本特性&quot; class=&quot;headerlink&quot; title=&quot;数组有哪些基本特性&quot;&gt;&lt;/a&gt;数组有哪些基本特性&lt;/h2&gt;&lt;p&gt;Go 语言的数组是一个长度固定的、由同构类型元素组成的连续序列。&lt;br&gt;因此Go 的数组类型包含两个重要属性：元素的类型和数组长度（元素的个数）。&lt;br&gt;所以，Go 语言中数组类型变量的声明：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr [N]T &lt;span class=&quot;comment&quot;&gt;//声明了一个数组变量 arr，它的类型为[N]T，其中元素的类型为 T，数组的长度为N。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过声明，我们可以得出一个结论：&lt;strong&gt;如果两个数组类型的元素类型 T 与数组长度 N 都是一样的，那么这两个数组类型是等价的，如果有一个属性不同，它们就是两个不同的数组类型。&lt;/strong&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="切片" scheme="https://octopuslian.github.io/tags/%E5%88%87%E7%89%87/"/>
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解channel的妙用</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-34/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-34/</id>
    <published>2022-10-06T14:01:37.000Z</published>
    <updated>2022-10-06T14:41:21.379Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是channel&quot;&gt;&lt;a href=&quot;#什么是channel&quot; class=&quot;headerlink&quot; title=&quot;什么是channel&quot;&gt;&lt;/a&gt;什么是channel&lt;/h1&gt;&lt;p&gt;&lt;code&gt;channel&lt;/code&gt;是Go语言提供的一种重要的并发原语。它在Go语言的&lt;code&gt;CSP&lt;/code&gt;模型中扮演者重要的角色：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以实现&lt;code&gt;goroutine&lt;/code&gt;之间的通信；  &lt;/li&gt;
&lt;li&gt;可以实现&lt;code&gt;goroutine&lt;/code&gt;之间的同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;channel&lt;/code&gt;原语的使用：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 创建一个无缓冲的int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 创建一个带缓冲的int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;lt;- x  &lt;span class=&quot;comment&quot;&gt;// 向channel c 中发送一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;- c    &lt;span class=&quot;comment&quot;&gt;// 从channel c 中接收一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = &amp;lt;- c  &lt;span class=&quot;comment&quot;&gt;// 从channel c 接收一个值并将其存储到变量x中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x,ok = &amp;lt;- c  &lt;span class=&quot;comment&quot;&gt;// 从channel c 接收一个值。若channel关闭了，ok将被置为false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)  &lt;span class=&quot;comment&quot;&gt;// 关闭channel c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 创建一个无缓冲的chan int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context, out &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- Value)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 将只发送channel作为函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spwn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt; &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; T  &lt;span class=&quot;comment&quot;&gt;// 将只接收类型channel作为返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="channel" scheme="https://octopuslian.github.io/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解goroutine的调度原理</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-32/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-32/</id>
    <published>2022-10-06T13:45:16.000Z</published>
    <updated>2022-10-06T14:41:21.379Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是goroutine&quot;&gt;&lt;a href=&quot;#什么是goroutine&quot; class=&quot;headerlink&quot; title=&quot;什么是goroutine&quot;&gt;&lt;/a&gt;什么是goroutine&lt;/h1&gt;&lt;p&gt;&lt;code&gt;goroutine&lt;/code&gt;是由Go运行时管理的用户层轻量级线程。  &lt;/p&gt;
&lt;p&gt;相比较于操作系统线程，&lt;code&gt;goroutine&lt;/code&gt;的资源占用和使用代价都要小得多，可以创建几十个、几百个甚至成千上万个&lt;code&gt;goroutine&lt;/code&gt;也不会造成系统资源的枯竭，&lt;code&gt;Go&lt;/code&gt;的运行时负责对&lt;code&gt;goroutine&lt;/code&gt;进行管理。而所谓的管理 &amp;#x3D;&amp;#x3D; 调度。  &lt;/p&gt;
&lt;h1 id=&quot;goroutine调度器&quot;&gt;&lt;a href=&quot;#goroutine调度器&quot; class=&quot;headerlink&quot; title=&quot;goroutine调度器&quot;&gt;&lt;/a&gt;goroutine调度器&lt;/h1&gt;&lt;p&gt;一个Go程序中可以创建成千上万个并发的&lt;code&gt;goroutine&lt;/code&gt;，而将这些&lt;code&gt;goroutine&lt;/code&gt;按照一定算法放到CPU上执行的程序就称为&lt;strong&gt;goroutine调度器&lt;/strong&gt;。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="goroutine" scheme="https://octopuslian.github.io/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 52. 两个链表的第一个公共节点</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-52-liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-52-liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian/</id>
    <published>2022-10-06T07:52:21.000Z</published>
    <updated>2022-10-06T08:02:44.094Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/&quot;&gt;剑指 Offer 52. 两个链表的第一个公共节点&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;和判断两个链表是否相交类似。  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;暴力&quot;&gt;&lt;a href=&quot;#暴力&quot; class=&quot;headerlink&quot; title=&quot;暴力&quot;&gt;&lt;/a&gt;暴力&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="链表" scheme="https://octopuslian.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 45. 把数组排成最小的数</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-45-ba-shu-zu-pai-cheng-zui-xiao-de-shu/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-45-ba-shu-zu-pai-cheng-zui-xiao-de-shu/</id>
    <published>2022-10-06T07:23:55.000Z</published>
    <updated>2022-10-06T08:02:44.094Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&quot;&gt;剑指 Offer 45. 把数组排成最小的数&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输出结果可能非常大，所以你需要返回一个字符串而不是整数  &lt;/li&gt;
&lt;li&gt;拼接起来的数字可能会有前导 0，最后结果不需要去掉前导0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 42. 连续子数组的最大和</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-42-lian-xu-zi-shu-zu-de-zui-da-he/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-42-lian-xu-zi-shu-zu-de-zui-da-he/</id>
    <published>2022-10-06T07:11:07.000Z</published>
    <updated>2022-10-06T08:02:44.090Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/&quot;&gt;剑指 Offer 42. 连续子数组的最大和&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;暴力求解&quot;&gt;&lt;a href=&quot;#暴力求解&quot; class=&quot;headerlink&quot; title=&quot;暴力求解&quot;&gt;&lt;/a&gt;暴力求解&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxSubArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//一个临时值，和一个最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    temp,max := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (temp + nums[i]) &amp;gt; nums[i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp = temp + nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp = nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; temp &amp;gt; max &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max  &lt;span class=&quot;comment&quot;&gt;//返回最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群部署WordPress网站-版本3</title>
    <link href="https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/"/>
    <id>https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/</id>
    <published>2022-10-04T11:26:31.000Z</published>
    <updated>2022-10-04T16:10:48.395Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;版本更新描述&quot;&gt;&lt;a href=&quot;#版本更新描述&quot; class=&quot;headerlink&quot; title=&quot;版本更新描述&quot;&gt;&lt;/a&gt;版本更新描述&lt;/h1&gt;&lt;p&gt;在基于&lt;a href=&quot;https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2&quot;&gt;版本2&lt;/a&gt;的基础上继续优化 WordPress 网站的部署，其中的关键是&lt;strong&gt;让数据库 MariaDB 实现数据持久化。&lt;/strong&gt;  &lt;/p&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;网站的整体架构图变化不大，前面的 Nginx、WordPress 还是原样，只需要修改 MariaDB：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/%E6%9E%B6%E6%9E%84%E5%9B%BE.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群部署WordPress网站-版本2</title>
    <link href="https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/"/>
    <id>https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/</id>
    <published>2022-10-04T11:09:14.000Z</published>
    <updated>2022-10-04T15:37:32.929Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;版本更新描述&quot;&gt;&lt;a href=&quot;#版本更新描述&quot; class=&quot;headerlink&quot; title=&quot;版本更新描述&quot;&gt;&lt;/a&gt;版本更新描述&lt;/h1&gt;&lt;p&gt;完全舍弃了 Docker，把所有的应用都放在 Kubernetes 集群里运行，部署方式也不再是裸 Pod，&lt;strong&gt;而是使用 Deployment，稳定性大幅度提升。&lt;/strong&gt;  &lt;/p&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/%E6%9E%B6%E6%9E%84%E5%9B%BE.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;原来的 Nginx 的作用是反向代理，那么在 Kubernetes 里它就升级成了具有相同功能的 Ingress Controller。WordPress 原来只有一个实例，现在变成了两个实例（你也可以任意横向扩容），可用性也就因此提高了不少。而 MariaDB 数据库因为要保证数据的一致性，暂时还是一个实例。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 40. 最小的k个数</title>
    <link href="https://octopuslian.github.io/2022/10/04/leetcode-lcof-40-zui-xiao-de-kge-shu/"/>
    <id>https://octopuslian.github.io/2022/10/04/leetcode-lcof-40-zui-xiao-de-kge-shu/</id>
    <published>2022-10-04T08:23:01.000Z</published>
    <updated>2022-10-06T07:00:11.621Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/&quot;&gt;剑指 Offer 40. 最小的k个数&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;题意就是从一个整数数组中，取出前k个最小的数。  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;简单直接&quot;&gt;&lt;a href=&quot;#简单直接&quot; class=&quot;headerlink&quot; title=&quot;简单直接&quot;&gt;&lt;/a&gt;简单直接&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker 搭建 WordPress 网站</title>
    <link href="https://octopuslian.github.io/2022/10/04/docker-deploy-wordpress/"/>
    <id>https://octopuslian.github.io/2022/10/04/docker-deploy-wordpress/</id>
    <published>2022-10-04T03:28:39.000Z</published>
    <updated>2022-10-04T11:05:58.262Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/10/04/docker-deploy-wordpress/1.png&quot;&gt;&lt;br&gt;MariaDB 作为后面的关系型数据库，端口号是 3306；WordPress 是中间的应用服务器，使用 MariaDB 来存储数据，它的端口是 80；Nginx 是前面的反向代理，它对外暴露 80 端口，然后把请求转发给 WordPress。  &lt;/p&gt;
&lt;h1 id=&quot;使用-docker-pull-拉取镜像&quot;&gt;&lt;a href=&quot;#使用-docker-pull-拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;使用 docker pull 拉取镜像&quot;&gt;&lt;/a&gt;使用 docker pull 拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull wordpress:5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull mariadb:10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull nginx:alpine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;启动-MariaDB&quot;&gt;&lt;a href=&quot;#启动-MariaDB&quot; class=&quot;headerlink&quot; title=&quot;启动 MariaDB&quot;&gt;&lt;/a&gt;启动 MariaDB&lt;/h1&gt;</summary>
    
    
    
    <category term="LearnDocker" scheme="https://octopuslian.github.io/categories/LearnDocker/"/>
    
    
    <category term="docker" scheme="https://octopuslian.github.io/tags/docker/"/>
    
    <category term="wordpress" scheme="https://octopuslian.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建私有镜像仓库-registry</title>
    <link href="https://octopuslian.github.io/2022/10/04/docker-deploy-private-image-repository-registry/"/>
    <id>https://octopuslian.github.io/2022/10/04/docker-deploy-private-image-repository-registry/</id>
    <published>2022-10-04T03:14:52.000Z</published>
    <updated>2022-10-04T06:53:44.380Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文将介绍如何搭建最简单的私有镜像仓库——&lt;code&gt;Docker Registry&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;首先，你需要使用 docker pull 命令拉取镜像：  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker pull registry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，我们需要做一个端口映射，对外暴露端口，这样 Docker Registry 才能提供服务。它的容器内端口是 5000，简单起见，我们在外面也使用同样的 5000 端口，所以运行命令：  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker run -d -p 5000:5000 registry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnDocker" scheme="https://octopuslian.github.io/categories/LearnDocker/"/>
    
    
    <category term="docker" scheme="https://octopuslian.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群部署WordPress网站-版本1</title>
    <link href="https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress/"/>
    <id>https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress/</id>
    <published>2022-10-04T02:33:56.000Z</published>
    <updated>2022-10-04T14:47:47.895Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;本文我将尝试用&lt;code&gt;Kubernetes&lt;/code&gt;集群上搭建一个&lt;code&gt;WordPress&lt;/code&gt;网站，他们的内部逻辑关系如下：&lt;br&gt;&lt;img src=&quot;/2022/10/04/kubernetes-cluster-deploy-wordpress/1.png&quot;&gt;  &lt;/p&gt;
&lt;h1 id=&quot;搭建步骤&quot;&gt;&lt;a href=&quot;#搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建步骤&quot;&gt;&lt;/a&gt;搭建步骤&lt;/h1&gt;&lt;h2 id=&quot;编排-MariaDB-对象&quot;&gt;&lt;a href=&quot;#编排-MariaDB-对象&quot; class=&quot;headerlink&quot; title=&quot;编排 MariaDB 对象&quot;&gt;&lt;/a&gt;编排 MariaDB 对象&lt;/h2&gt;&lt;p&gt;&lt;code&gt;MariaDB&lt;/code&gt;需要4个环境变量，比如数据库名、用户名、密码等，在&lt;code&gt;Docker&lt;/code&gt;里我们是在命令行里使用参数&lt;code&gt;--env&lt;/code&gt;，而在&lt;code&gt;Kubernetes&lt;/code&gt;里我们就应该使用&lt;strong&gt;ConfigMap&lt;/strong&gt;，为此需要定义一个&lt;code&gt;maria-cm&lt;/code&gt;对象：  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="wordpress" scheme="https://octopuslian.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装ClickHouse</title>
    <link href="https://octopuslian.github.io/2022/09/28/ubuntu-install-clickhouse/"/>
    <id>https://octopuslian.github.io/2022/09/28/ubuntu-install-clickhouse/</id>
    <published>2022-09-28T02:14:15.000Z</published>
    <updated>2022-10-04T07:09:45.128Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;ClickHouse简介&quot;&gt;&lt;a href=&quot;#ClickHouse简介&quot; class=&quot;headerlink&quot; title=&quot;ClickHouse简介&quot;&gt;&lt;/a&gt;ClickHouse简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ClickHouse是一个用于联机分析(OLAP)的列式数据库管理系统(DBMS);  &lt;/li&gt;
&lt;li&gt;列式数据库更适合于OLAP场景(对于大多数查询而言，处理速度至少提高了100倍);&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;安装部署&quot;&gt;&lt;a href=&quot;#安装部署&quot; class=&quot;headerlink&quot; title=&quot;安装部署&quot;&gt;&lt;/a&gt;安装部署&lt;/h1&gt;&lt;h2 id=&quot;在线&quot;&gt;&lt;a href=&quot;#在线&quot; class=&quot;headerlink&quot; title=&quot;在线&quot;&gt;&lt;/a&gt;在线&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudp apt update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install clickhouse-client clickhouse-server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 开启服务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo service clickhouse-server start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 客户端连接&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 默认无密码，执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clickhouse-client &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 有密码的话，执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;clickhouse-client --password 123456&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnClickHouse" scheme="https://octopuslian.github.io/categories/LearnClickHouse/"/>
    
    
    <category term="clickhouse" scheme="https://octopuslian.github.io/tags/clickhouse/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络原理——Ingress对象</title>
    <link href="https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-network-ingress/"/>
    <id>https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-network-ingress/</id>
    <published>2022-09-12T14:21:33.000Z</published>
    <updated>2022-10-04T06:53:44.384Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;全局的、为了代理不同后端 Service 而设置的负载均衡服务，就是 Kubernetes 里的Ingress 服务。  &lt;/p&gt;
&lt;p&gt;所以，Ingress 的功能其实很容易理解：&lt;strong&gt;所谓 Ingress，就是 Service 的“Service”&lt;/strong&gt;。  &lt;/p&gt;
&lt;p&gt;假如我现在有这样一个站点：&lt;code&gt;https://cafe.example.com&lt;/code&gt;，其中&lt;code&gt;https://cafe.example.com/coffee&lt;/code&gt;对应的是“咖啡点餐系统”，而&lt;code&gt;https://cafe.example.com/tea&lt;/code&gt;对应的是&lt;code&gt;茶水点餐系统&lt;/code&gt;，这两个系统，分别由名叫&lt;code&gt;coffee&lt;/code&gt;和&lt;code&gt;tea&lt;/code&gt;两个&lt;code&gt;Deployment&lt;/code&gt;来提供服。  &lt;/p&gt;
&lt;p&gt;那么，我如何能使用 Kubernetes 的 Ingress 来创建一个统一的负载均衡器，从而实现当用户访问不同的域名时，能够访问到不同的 Deployment 呢？&lt;br&gt;上述功能，在 Kubernetes 里就需要通过 Ingress 对象来描述：  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="网络原理" scheme="https://octopuslian.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    <category term="Ingress" scheme="https://octopuslian.github.io/tags/Ingress/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络原理——网络模型与CNI网络插件</title>
    <link href="https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-network-model-and-cni-network-plug-in/"/>
    <id>https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-network-model-and-cni-network-plug-in/</id>
    <published>2022-09-12T10:10:34.000Z</published>
    <updated>2022-10-04T06:53:44.388Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Kubernetes网络模型&quot;&gt;&lt;a href=&quot;#Kubernetes网络模型&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes网络模型&quot;&gt;&lt;/a&gt;Kubernetes网络模型&lt;/h1&gt;&lt;p&gt;Kubernetes 是通过一个叫作 CNI 的接口，维护了一个单独的网桥来代替 docker0。&lt;br&gt;这个网桥的名字就叫作：CNI 网桥，它在宿主机上的设备名称默认是：cni0。&lt;br&gt;&lt;img src=&quot;/2022/09/12/kubernetes-network-principle-network-model-and-cni-network-plug-in/1.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;在这里，Kubernetes 为 Flannel 分配的子网范围是 10.244.0.0&amp;#x2F;16。&lt;br&gt;这个参数可以在部署的时候指定，比如：  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;kubeadm init --pod-network-cidr=10.244.0.0/16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：也可以在部署完成后，通过修改 kube-controller-manager 的配置文件来指定。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="网络原理" scheme="https://octopuslian.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    <category term="CNI" scheme="https://octopuslian.github.io/tags/CNI/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络原理——容器跨主机网络</title>
    <link href="https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-container-accross-host-network/"/>
    <id>https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-container-accross-host-network/</id>
    <published>2022-09-12T08:52:57.000Z</published>
    <updated>2022-10-04T06:53:44.384Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Flannel介绍&quot;&gt;&lt;a href=&quot;#Flannel介绍&quot; class=&quot;headerlink&quot; title=&quot;Flannel介绍&quot;&gt;&lt;/a&gt;Flannel介绍&lt;/h1&gt;&lt;p&gt;要理解容器“跨主通信”的原理，就一定要先从&lt;code&gt;Flannel&lt;/code&gt;这个项目开始。  &lt;/p&gt;
&lt;p&gt;Flannel 项目是 CoreOS 公司主推的容器网络方案。事实上，Flannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现。目前，Flannel 支持三种后端实现（种容器跨主网络的主流实现方法。），分别是：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VXLAN  &lt;/li&gt;
&lt;li&gt;host-gw  &lt;/li&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UDP模式&quot;&gt;&lt;a href=&quot;#UDP模式&quot; class=&quot;headerlink&quot; title=&quot;UDP模式&quot;&gt;&lt;/a&gt;UDP模式&lt;/h1&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="容器" scheme="https://octopuslian.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="网络原理" scheme="https://octopuslian.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    <category term="跨主机" scheme="https://octopuslian.github.io/tags/%E8%B7%A8%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes网络原理——单机容器网络</title>
    <link href="https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-a-single-machine-container/"/>
    <id>https://octopuslian.github.io/2022/09/12/kubernetes-network-principle-a-single-machine-container/</id>
    <published>2022-09-12T06:38:54.000Z</published>
    <updated>2022-10-04T06:53:44.384Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;网络栈&quot;&gt;&lt;a href=&quot;#网络栈&quot; class=&quot;headerlink&quot; title=&quot;网络栈&quot;&gt;&lt;/a&gt;网络栈&lt;/h2&gt;&lt;p&gt;包括了：网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table）和 iptables 规则。对于一个进程来说，这些要素，其实就构成了它发起和响应网络请求的基本环境。  &lt;/p&gt;
&lt;p&gt;注意：作为一个容器，它可以声明直接使用宿主机的网络栈（–net&amp;#x3D;host），即：不开启 Network Namespace，比如：  &lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 容器启动后，直接监听的就是宿主机的 80 端口。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run –d –net=host --name nginx-host nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="容器" scheme="https://octopuslian.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="网络原理" scheme="https://octopuslian.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes存储原理——深入理解本地持久化数据卷</title>
    <link href="https://octopuslian.github.io/2022/09/09/kubernetes-storage-principle-local-persistent-data-volume/"/>
    <id>https://octopuslian.github.io/2022/09/09/kubernetes-storage-principle-local-persistent-data-volume/</id>
    <published>2022-09-09T01:38:26.000Z</published>
    <updated>2022-10-04T06:53:44.388Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;关于本地持久化存储&quot;&gt;&lt;a href=&quot;#关于本地持久化存储&quot; class=&quot;headerlink&quot; title=&quot;关于本地持久化存储&quot;&gt;&lt;/a&gt;关于本地持久化存储&lt;/h1&gt;&lt;p&gt;用户希望 Kubernetes 能够直接使用宿主机上的本地磁盘目录，而不依赖于远程存储服务，来提供“持久化”的容器&lt;code&gt;Volume&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;这样做的好处就是：由于这个&lt;code&gt;Volume&lt;/code&gt;直接使用的是本地磁盘，尤其是&lt;code&gt;SSD&lt;/code&gt;盘，它的读&lt;br&gt;写性能相比于大多数远程存储来说，要好得多。  &lt;/p&gt;
&lt;h1 id=&quot;Local-PV的设计难点&quot;&gt;&lt;a href=&quot;#Local-PV的设计难点&quot; class=&quot;headerlink&quot; title=&quot;Local PV的设计难点&quot;&gt;&lt;/a&gt;Local PV的设计难点&lt;/h1&gt;&lt;h2 id=&quot;如何把本地磁盘抽象成PV&quot;&gt;&lt;a href=&quot;#如何把本地磁盘抽象成PV&quot; class=&quot;headerlink&quot; title=&quot;如何把本地磁盘抽象成PV&quot;&gt;&lt;/a&gt;如何把本地磁盘抽象成PV&lt;/h2&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="存储原理" scheme="https://octopuslian.github.io/tags/%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes存储原理——PV和PVC的设计和实现</title>
    <link href="https://octopuslian.github.io/2022/09/09/kubernetes-storage-principle-pv-pvc/"/>
    <id>https://octopuslian.github.io/2022/09/09/kubernetes-storage-principle-pv-pvc/</id>
    <published>2022-09-09T01:36:40.000Z</published>
    <updated>2022-10-04T06:53:44.388Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;PV和PVC&quot;&gt;&lt;a href=&quot;#PV和PVC&quot; class=&quot;headerlink&quot; title=&quot;PV和PVC&quot;&gt;&lt;/a&gt;PV和PVC&lt;/h1&gt;&lt;p&gt;&lt;code&gt;PV&lt;/code&gt;是持久化存储数据卷。  &lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;API&lt;/code&gt;对象主要定义的是一个持久化存储在宿主机上的目录，比如一个&lt;code&gt;NFS&lt;/code&gt;的挂载目录。  &lt;/p&gt;
&lt;p&gt;下面来定义一个&lt;code&gt;NFS&lt;/code&gt;类型的&lt;code&gt;PV&lt;/code&gt;：  &lt;/p&gt;
&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;PersistentVolume&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;nfs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;storageClassName:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;manual&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;capacity:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;storage:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;1Gi&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;accessModes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;bullet&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;ReadWriteMany&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;nfs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10.244&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
    <category term="存储原理" scheme="https://octopuslian.github.io/tags/%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/"/>
    
    <category term="持久化存储" scheme="https://octopuslian.github.io/tags/%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    
    <category term="PV" scheme="https://octopuslian.github.io/tags/PV/"/>
    
    <category term="PVC" scheme="https://octopuslian.github.io/tags/PVC/"/>
    
  </entry>
  
</feed>
