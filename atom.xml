<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不会飞的章鱼</title>
  <icon>https://octopuslian.github.io/icon.png</icon>
  <subtitle>熟能生巧，勤能补拙；念念不忘，必有回响。</subtitle>
  <link href="https://octopuslian.github.io/atom.xml" rel="self"/>
  
  <link href="https://octopuslian.github.io/"/>
  <updated>2023-05-27T12:05:24.169Z</updated>
  <id>https://octopuslian.github.io/</id>
  
  <author>
    <name>Neo Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫基础-技术选型</title>
    <link href="https://octopuslian.github.io/2023/05/19/crawler-basic-technology-selection/"/>
    <id>https://octopuslian.github.io/2023/05/19/crawler-basic-technology-selection/</id>
    <published>2023-05-19T15:11:03.000Z</published>
    <updated>2023-05-27T12:05:24.169Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Scrapy-VS-requests-beautifulsoup&quot;&gt;&lt;a href=&quot;#Scrapy-VS-requests-beautifulsoup&quot; class=&quot;headerlink&quot; title=&quot;Scrapy VS</summary>
        
      
    
    
    
    <category term="LearnCrawler" scheme="https://octopuslian.github.io/categories/LearnCrawler/"/>
    
    
    <category term="爬虫" scheme="https://octopuslian.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Scrapy" scheme="https://octopuslian.github.io/tags/Scrapy/"/>
    
    <category term="requests" scheme="https://octopuslian.github.io/tags/requests/"/>
    
    <category term="beautifulsoup" scheme="https://octopuslian.github.io/tags/beautifulsoup/"/>
    
  </entry>
  
  <entry>
    <title>Go微服务框架go-micro v3快速入门</title>
    <link href="https://octopuslian.github.io/2023/03/07/go-micro-v3-quick-get-start/"/>
    <id>https://octopuslian.github.io/2023/03/07/go-micro-v3-quick-get-start/</id>
    <published>2023-03-07T07:41:27.000Z</published>
    <updated>2023-05-27T13:31:07.371Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;go-micro-v3和micro-v3是什么关系？&quot;&gt;&lt;a href=&quot;#go-micro-v3和micro-v3是什么关系？&quot; class=&quot;headerlink&quot; title=&quot;go-micro v3和micro v3是什么关系？&quot;&gt;&lt;/a&gt;go-micro v3和micro v3是什么关系？&lt;/h1&gt;&lt;h2 id=&quot;go-micro是什么？&quot;&gt;&lt;a href=&quot;#go-micro是什么？&quot; class=&quot;headerlink&quot; title=&quot;go-micro是什么？&quot;&gt;&lt;/a&gt;go-micro是什么？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一个go微服务开放框架  &lt;/li&gt;
&lt;li&gt;Framework（程序开放框架）：用来方便编写微服务  &lt;/li&gt;
&lt;li&gt;Clients（多语言客户端）：支持多语言访问服务端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;go-micro-v3与micro-v3的关系&quot;&gt;&lt;a href=&quot;#go-micro-v3与micro-v3的关系&quot; class=&quot;headerlink&quot; title=&quot;go-micro v3与micro v3的关系&quot;&gt;&lt;/a&gt;go-micro v3与micro v3的关系&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;micro v3版本类似isito把基础设施抽象成能力  &lt;/li&gt;
&lt;li&gt;micro的技术体系和官方平台绑定较多  &lt;/li&gt;
&lt;li&gt;go-micro v3为微服务开发框架，自由度相对较高&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LearnMicroservices" scheme="https://octopuslian.github.io/categories/LearnMicroservices/"/>
    
    
    <category term="微服务" scheme="https://octopuslian.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>网络编程基础</title>
    <link href="https://octopuslian.github.io/2023/03/01/network-programming-base/"/>
    <id>https://octopuslian.github.io/2023/03/01/network-programming-base/</id>
    <published>2023-03-01T07:59:10.000Z</published>
    <updated>2023-05-27T12:05:24.173Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;OSI七层网络协议&quot;&gt;&lt;a href=&quot;#OSI七层网络协议&quot; class=&quot;headerlink&quot; title=&quot;OSI七层网络协议&quot;&gt;&lt;/a&gt;OSI七层网络协议&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2023/03/01/network-programming-base/osi7.png&quot;&gt;  &lt;/p&gt;
&lt;h1 id=&quot;经典协议与数据包&quot;&gt;&lt;a href=&quot;#经典协议与数据包&quot; class=&quot;headerlink&quot; title=&quot;经典协议与数据包&quot;&gt;&lt;/a&gt;经典协议与数据包&lt;/h1&gt;&lt;h2 id=&quot;TCP数据包构成&quot;&gt;&lt;a href=&quot;#TCP数据包构成&quot; class=&quot;headerlink&quot; title=&quot;TCP数据包构成&quot;&gt;&lt;/a&gt;TCP数据包构成&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2023/03/01/network-programming-base/TCP%E6%95%B0%E6%8D%AE%E5%8C%85%E7%BB%93%E6%9E%84.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnComputerNetwork" scheme="https://octopuslian.github.io/categories/LearnComputerNetwork/"/>
    
    
    <category term="编程" scheme="https://octopuslian.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="网络" scheme="https://octopuslian.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="计算机" scheme="https://octopuslian.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Go代码安全指南</title>
    <link href="https://octopuslian.github.io/2023/01/01/tencent-secguide-golang/"/>
    <id>https://octopuslian.github.io/2023/01/01/tencent-secguide-golang/</id>
    <published>2023-01-01T14:04:42.000Z</published>
    <updated>2023-01-01T14:08:37.456Z</updated>
    
    
    <summary type="html">&lt;!-- markdown=&quot;1&quot; is required for GitHub Pages to render the TOC properly. --&gt;

&lt;details markdown=&quot;1&quot;&gt;
  &lt;summary&gt;目录&lt;/summary&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#1&quot;&gt;1 通用类&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1.1&quot;&gt;I. 代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.1&quot;&gt;1.1 内存管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.2&quot;&gt;1.2 文件操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.3&quot;&gt;1.3 系统接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.4&quot;&gt;1.4 通信安全&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.5&quot;&gt;1.5 敏感数据保护&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.6&quot;&gt;1.6 加密解密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1.1.7&quot;&gt;1.7 正则表达式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;#2&quot;&gt;2 后台类&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2.1&quot;&gt;I. 代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.1&quot;&gt;1.1 输入校验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.2&quot;&gt;1.2 SQL操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.3&quot;&gt;1.3 网络请求&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.4&quot;&gt;1.4 服务器端渲染&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.5&quot;&gt;1.5 Web跨域&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.6&quot;&gt;1.6 响应输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.7&quot;&gt;1.7 会话管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.8&quot;&gt;1.8 访问控制&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2.1.9&quot;&gt;1.9 并发保护&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/details&gt;





&lt;p&gt;&lt;a id=&quot;1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;通用类&quot;&gt;&lt;a href=&quot;#通用类&quot; class=&quot;headerlink&quot; title=&quot;通用类&quot;&gt;&lt;/a&gt;通用类&lt;/h1&gt;&lt;p&gt;&lt;a id=&quot;1.1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-代码实现类&quot;&gt;&lt;a href=&quot;#1-代码实现类&quot; class=&quot;headerlink&quot; title=&quot;1. 代码实现类&quot;&gt;&lt;/a&gt;1. 代码实现类&lt;/h2&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Go" scheme="https://octopuslian.github.io/tags/Go/"/>
    
    <category term="安全" scheme="https://octopuslian.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解sync包的正确用法</title>
    <link href="https://octopuslian.github.io/2022/10/09/book-go-programming-from-beginner-to-master-35/"/>
    <id>https://octopuslian.github.io/2022/10/09/book-go-programming-from-beginner-to-master-35/</id>
    <published>2022-10-09T07:49:34.000Z</published>
    <updated>2023-01-01T14:08:37.452Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;sync包还是channel&quot;&gt;&lt;a href=&quot;#sync包还是channel&quot; class=&quot;headerlink&quot; title=&quot;sync包还是channel&quot;&gt;&lt;/a&gt;sync包还是channel&lt;/h1&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cs = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 模拟临界区要保护的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mu sync.Mutex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;criticalSectionSyncByMutex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mu.Lock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cs++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mu.Unlock()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;criticalSectionSyncByChan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c &amp;lt;- &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;&amp;#123;&amp;#125;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cs++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;-c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkCriticalSectionSyncByMutex&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; n &amp;lt; b.N; n++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		criticalSectionSyncByMutex()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BenchmarkCriticalSectionSyncByChan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(b *testing.B)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; n := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; n &amp;lt; b.N; n++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		criticalSectionSyncByChan()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;BenchmarkCriticalSectionSyncByMutex-8   	76766581	        15.41 ns/op&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;BenchmarkCriticalSectionSyncByChan-8   	    32243965	        37.59 ns/op&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;使用sync包的注意事项&quot;&gt;&lt;a href=&quot;#使用sync包的注意事项&quot; class=&quot;headerlink&quot; title=&quot;使用sync包的注意事项&quot;&gt;&lt;/a&gt;使用sync包的注意事项&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;sync&lt;/code&gt;包源文件中，我们看到以下注释：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A Mutex must not be copied after first use.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A RWMutex must not be copied after first use.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// A Cond must not be copied after first use.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="sync包" scheme="https://octopuslian.github.io/tags/sync%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——优先考虑并发设计</title>
    <link href="https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-31/"/>
    <id>https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-31/</id>
    <published>2022-10-08T06:12:18.000Z</published>
    <updated>2022-10-08T12:31:12.583Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;并发与并行&quot;&gt;&lt;a href=&quot;#并发与并行&quot; class=&quot;headerlink&quot; title=&quot;并发与并行&quot;&gt;&lt;/a&gt;并发与并行&lt;/h1&gt;&lt;h2 id=&quot;并行方案&quot;&gt;&lt;a href=&quot;#并行方案&quot; class=&quot;headerlink&quot; title=&quot;并行方案&quot;&gt;&lt;/a&gt;并行方案&lt;/h2&gt;&lt;p&gt;在处理器核数充足的情况下启动多个单线程应用的实例，这样每个实例运行在一个核上，尽可能多地利用多核计算资源。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/08/book-go-programming-from-beginner-to-master-31/%E5%8D%95%E8%BF%9B%E7%A8%8B.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/08/book-go-programming-from-beginner-to-master-31/%E5%A4%9A%E8%BF%9B%E7%A8%8B.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="并发" scheme="https://octopuslian.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——使用defer让函数更简洁、更健壮</title>
    <link href="https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-22/"/>
    <id>https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-22/</id>
    <published>2022-10-08T05:10:26.000Z</published>
    <updated>2022-10-08T12:31:12.583Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;defer的运作机制&quot;&gt;&lt;a href=&quot;#defer的运作机制&quot; class=&quot;headerlink&quot; title=&quot;defer的运作机制&quot;&gt;&lt;/a&gt;defer的运作机制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在 Go 中，只有在函数（和方法）内部才能使用 defer；  &lt;/li&gt;
&lt;li&gt;defer 关键字后面只能接函数（或方法），这些函数被称为deferred 函数。defer 将它们注册到其所在 Goroutine 中，用于存放 deferred 函数的栈数据结构中，这些deferred 函数将在执行 defer 的函数退出前，按后进先出（LIFO）的顺序被程序调度执行：&lt;br&gt;&lt;img src=&quot;/2022/10/08/book-go-programming-from-beginner-to-master-22/defer1.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;defer的常见用法&quot;&gt;&lt;a href=&quot;#defer的常见用法&quot; class=&quot;headerlink&quot; title=&quot;defer的常见用法&quot;&gt;&lt;/a&gt;defer的常见用法&lt;/h1&gt;&lt;h2 id=&quot;拦截panic&quot;&gt;&lt;a href=&quot;#拦截panic&quot; class=&quot;headerlink&quot; title=&quot;拦截panic&quot;&gt;&lt;/a&gt;拦截panic&lt;/h2&gt;&lt;p&gt;按需要对&lt;code&gt;panic&lt;/code&gt;进行处理，可以尝试从&lt;code&gt;panic&lt;/code&gt;中恢复。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="defer" scheme="https://octopuslian.github.io/tags/defer/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解string实现原理并高效使用</title>
    <link href="https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-15/"/>
    <id>https://octopuslian.github.io/2022/10/08/book-go-programming-from-beginner-to-master-15/</id>
    <published>2022-10-08T04:35:31.000Z</published>
    <updated>2022-10-08T12:31:12.583Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;Go语言的字符串类型&quot;&gt;&lt;a href=&quot;#Go语言的字符串类型&quot; class=&quot;headerlink&quot; title=&quot;Go语言的字符串类型&quot;&gt;&lt;/a&gt;Go语言的字符串类型&lt;/h1&gt;&lt;p&gt;统一设置为&lt;code&gt;string&lt;/code&gt;：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	s = &lt;span class=&quot;string&quot;&gt;&amp;quot;string constant&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s1 &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;string variable&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%T\n&amp;quot;&lt;/span&gt;, s)                          &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%T\n&amp;quot;&lt;/span&gt;, s1)                         &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Printf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%T\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;temporary string literal&amp;quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;功能特点：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;string类型的数据是不可变的；  &lt;/li&gt;
&lt;li&gt;零值可用；  &lt;/li&gt;
&lt;li&gt;获取长度的时间复杂度是O(1)级别  &lt;/li&gt;
&lt;li&gt;支持通过 +&amp;#x2F;+&amp;#x3D; 操作符进行字符串连接  &lt;/li&gt;
&lt;li&gt;支持各种比较关系操作符：&amp;#x3D;&amp;#x3D;、!&amp;#x3D;、&amp;gt;&amp;#x3D;、&amp;lt;&amp;#x3D;、&amp;lt;、&amp;gt;  &lt;/li&gt;
&lt;li&gt;对非ASCII字符提供原生支持  &lt;/li&gt;
&lt;li&gt;原生支持多行字符串&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="string" scheme="https://octopuslian.github.io/tags/string/"/>
    
    <category term="字符串" scheme="https://octopuslian.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解map原理并高效使用</title>
    <link href="https://octopuslian.github.io/2022/10/07/book-go-programming-from-beginner-to-master-14/"/>
    <id>https://octopuslian.github.io/2022/10/07/book-go-programming-from-beginner-to-master-14/</id>
    <published>2022-10-07T14:51:12.000Z</published>
    <updated>2022-10-07T04:13:29.815Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是Map&quot;&gt;&lt;a href=&quot;#什么是Map&quot; class=&quot;headerlink&quot; title=&quot;什么是Map&quot;&gt;&lt;/a&gt;什么是Map&lt;/h1&gt;&lt;p&gt;map 是 Go 语言提供的一种抽象数据类型，它表示一组无序的键值对。  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/07/book-go-programming-from-beginner-to-master-14/map1.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt;的声明：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;[key_type]value_type&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="map" scheme="https://octopuslian.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解切片原理并高效使用</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-13/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-13/</id>
    <published>2022-10-06T14:51:07.000Z</published>
    <updated>2022-10-07T04:13:29.811Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是数组&quot;&gt;&lt;a href=&quot;#什么是数组&quot; class=&quot;headerlink&quot; title=&quot;什么是数组&quot;&gt;&lt;/a&gt;什么是数组&lt;/h1&gt;&lt;h2 id=&quot;数组有哪些基本特性&quot;&gt;&lt;a href=&quot;#数组有哪些基本特性&quot; class=&quot;headerlink&quot; title=&quot;数组有哪些基本特性&quot;&gt;&lt;/a&gt;数组有哪些基本特性&lt;/h2&gt;&lt;p&gt;Go 语言的数组是一个长度固定的、由同构类型元素组成的连续序列。&lt;br&gt;因此Go 的数组类型包含两个重要属性：元素的类型和数组长度（元素的个数）。&lt;br&gt;所以，Go 语言中数组类型变量的声明：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr [N]T &lt;span class=&quot;comment&quot;&gt;//声明了一个数组变量 arr，它的类型为[N]T，其中元素的类型为 T，数组的长度为N。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;通过声明，我们可以得出一个结论：&lt;strong&gt;如果两个数组类型的元素类型 T 与数组长度 N 都是一样的，那么这两个数组类型是等价的，如果有一个属性不同，它们就是两个不同的数组类型。&lt;/strong&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="切片" scheme="https://octopuslian.github.io/tags/%E5%88%87%E7%89%87/"/>
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解channel的妙用</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-34/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-34/</id>
    <published>2022-10-06T14:01:37.000Z</published>
    <updated>2022-10-08T07:51:00.649Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是channel&quot;&gt;&lt;a href=&quot;#什么是channel&quot; class=&quot;headerlink&quot; title=&quot;什么是channel&quot;&gt;&lt;/a&gt;什么是channel&lt;/h1&gt;&lt;p&gt;&lt;code&gt;channel&lt;/code&gt;是Go语言提供的一种重要的并发原语。它在Go语言的&lt;code&gt;CSP&lt;/code&gt;模型中扮演者重要的角色：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以实现&lt;code&gt;goroutine&lt;/code&gt;之间的通信；  &lt;/li&gt;
&lt;li&gt;可以实现&lt;code&gt;goroutine&lt;/code&gt;之间的同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;channel&lt;/code&gt;原语的使用：  &lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 创建一个无缓冲的int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// 创建一个带缓冲的int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c &amp;lt;- x  &lt;span class=&quot;comment&quot;&gt;// 向channel c 中发送一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;- c    &lt;span class=&quot;comment&quot;&gt;// 从channel c 中接收一个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x = &amp;lt;- c  &lt;span class=&quot;comment&quot;&gt;// 从channel c 接收一个值并将其存储到变量x中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x,ok = &amp;lt;- c  &lt;span class=&quot;comment&quot;&gt;// 从channel c 接收一个值。若channel关闭了，ok将被置为false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; c &amp;#123;...&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;(c)  &lt;span class=&quot;comment&quot;&gt;// 关闭channel c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;// 创建一个无缓冲的chan int类型的channel&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(ctx context.Context, out &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- Value)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;error&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 将只发送channel作为函数参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spwn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(...)&lt;/span&gt;&lt;/span&gt; &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; T  &lt;span class=&quot;comment&quot;&gt;// 将只接收类型channel作为返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="channel" scheme="https://octopuslian.github.io/tags/channel/"/>
    
  </entry>
  
  <entry>
    <title>Go语言精进——了解goroutine的调度原理</title>
    <link href="https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-32/"/>
    <id>https://octopuslian.github.io/2022/10/06/book-go-programming-from-beginner-to-master-32/</id>
    <published>2022-10-06T13:45:16.000Z</published>
    <updated>2022-10-08T07:22:21.506Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是goroutine&quot;&gt;&lt;a href=&quot;#什么是goroutine&quot; class=&quot;headerlink&quot; title=&quot;什么是goroutine&quot;&gt;&lt;/a&gt;什么是goroutine&lt;/h1&gt;&lt;p&gt;&lt;code&gt;goroutine&lt;/code&gt;是由Go运行时管理的用户层轻量级线程。  &lt;/p&gt;
&lt;p&gt;相比较于操作系统线程，&lt;code&gt;goroutine&lt;/code&gt;的资源占用和使用代价都要小得多，可以创建几十个、几百个甚至成千上万个&lt;code&gt;goroutine&lt;/code&gt;也不会造成系统资源的枯竭，&lt;code&gt;Go&lt;/code&gt;的运行时负责对&lt;code&gt;goroutine&lt;/code&gt;进行管理。而所谓的管理 &amp;#x3D;&amp;#x3D; 调度。  &lt;/p&gt;
&lt;h1 id=&quot;goroutine调度器&quot;&gt;&lt;a href=&quot;#goroutine调度器&quot; class=&quot;headerlink&quot; title=&quot;goroutine调度器&quot;&gt;&lt;/a&gt;goroutine调度器&lt;/h1&gt;&lt;p&gt;一个Go程序中可以创建成千上万个并发的&lt;code&gt;goroutine&lt;/code&gt;，而将这些&lt;code&gt;goroutine&lt;/code&gt;按照一定算法放到CPU上执行的程序就称为&lt;strong&gt;goroutine调度器&lt;/strong&gt;。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnGo" scheme="https://octopuslian.github.io/categories/LearnGo/"/>
    
    
    <category term="Golang" scheme="https://octopuslian.github.io/tags/Golang/"/>
    
    <category term="goroutine" scheme="https://octopuslian.github.io/tags/goroutine/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 52. 两个链表的第一个公共节点</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-52-liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-52-liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian/</id>
    <published>2022-10-06T07:52:21.000Z</published>
    <updated>2022-10-06T08:02:44.094Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/&quot;&gt;剑指 Offer 52. 两个链表的第一个公共节点&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;和判断两个链表是否相交类似。  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;暴力&quot;&gt;&lt;a href=&quot;#暴力&quot; class=&quot;headerlink&quot; title=&quot;暴力&quot;&gt;&lt;/a&gt;暴力&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="链表" scheme="https://octopuslian.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 45. 把数组排成最小的数</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-45-ba-shu-zu-pai-cheng-zui-xiao-de-shu/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-45-ba-shu-zu-pai-cheng-zui-xiao-de-shu/</id>
    <published>2022-10-06T07:23:55.000Z</published>
    <updated>2022-10-06T08:02:44.094Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/&quot;&gt;剑指 Offer 45. 把数组排成最小的数&lt;/a&gt;  &lt;/p&gt;
&lt;h2 id=&quot;注意：&quot;&gt;&lt;a href=&quot;#注意：&quot; class=&quot;headerlink&quot; title=&quot;注意：&quot;&gt;&lt;/a&gt;注意：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;输出结果可能非常大，所以你需要返回一个字符串而不是整数  &lt;/li&gt;
&lt;li&gt;拼接起来的数字可能会有前导 0，最后结果不需要去掉前导0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 42. 连续子数组的最大和</title>
    <link href="https://octopuslian.github.io/2022/10/06/leetcode-lcof-42-lian-xu-zi-shu-zu-de-zui-da-he/"/>
    <id>https://octopuslian.github.io/2022/10/06/leetcode-lcof-42-lian-xu-zi-shu-zu-de-zui-da-he/</id>
    <published>2022-10-06T07:11:07.000Z</published>
    <updated>2022-10-06T08:02:44.090Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/&quot;&gt;剑指 Offer 42. 连续子数组的最大和&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;暴力求解&quot;&gt;&lt;a href=&quot;#暴力求解&quot; class=&quot;headerlink&quot; title=&quot;暴力求解&quot;&gt;&lt;/a&gt;暴力求解&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxSubArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(nums []&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//一个临时值，和一个最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    temp,max := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,nums[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(nums);i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (temp + nums[i]) &amp;gt; nums[i] &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp = temp + nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            temp = nums[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; temp &amp;gt; max &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            max = temp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max  &lt;span class=&quot;comment&quot;&gt;//返回最大值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
    <category term="数组" scheme="https://octopuslian.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群部署WordPress网站-版本3</title>
    <link href="https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/"/>
    <id>https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/</id>
    <published>2022-10-04T11:26:31.000Z</published>
    <updated>2022-10-04T16:10:48.395Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;版本更新描述&quot;&gt;&lt;a href=&quot;#版本更新描述&quot; class=&quot;headerlink&quot; title=&quot;版本更新描述&quot;&gt;&lt;/a&gt;版本更新描述&lt;/h1&gt;&lt;p&gt;在基于&lt;a href=&quot;https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2&quot;&gt;版本2&lt;/a&gt;的基础上继续优化 WordPress 网站的部署，其中的关键是&lt;strong&gt;让数据库 MariaDB 实现数据持久化。&lt;/strong&gt;  &lt;/p&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;网站的整体架构图变化不大，前面的 Nginx、WordPress 还是原样，只需要修改 MariaDB：  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/04/kubernetes-cluster-deploy-wordpress-v3/%E6%9E%B6%E6%9E%84%E5%9B%BE.png&quot;&gt;  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes集群部署WordPress网站-版本2</title>
    <link href="https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/"/>
    <id>https://octopuslian.github.io/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/</id>
    <published>2022-10-04T11:09:14.000Z</published>
    <updated>2022-10-12T06:27:17.659Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;版本更新描述&quot;&gt;&lt;a href=&quot;#版本更新描述&quot; class=&quot;headerlink&quot; title=&quot;版本更新描述&quot;&gt;&lt;/a&gt;版本更新描述&lt;/h1&gt;&lt;p&gt;完全舍弃了 Docker，把所有的应用都放在 Kubernetes 集群里运行，部署方式也不再是裸 Pod，&lt;strong&gt;而是使用 Deployment，稳定性大幅度提升。&lt;/strong&gt;  &lt;/p&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/10/04/kubernetes-cluster-deploy-wordpress-v2/%E6%9E%B6%E6%9E%84%E5%9B%BE.png&quot;&gt;  &lt;/p&gt;
&lt;p&gt;原来的 Nginx 的作用是反向代理，那么在 Kubernetes 里它就升级成了具有相同功能的 Ingress Controller。WordPress 原来只有一个实例，现在变成了两个实例（你也可以任意横向扩容），可用性也就因此提高了不少。而 MariaDB 数据库因为要保证数据的一致性，暂时还是一个实例。  &lt;/p&gt;</summary>
    
    
    
    <category term="LearnKubernetes" scheme="https://octopuslian.github.io/categories/LearnKubernetes/"/>
    
    
    <category term="kubernetes" scheme="https://octopuslian.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer 40. 最小的k个数</title>
    <link href="https://octopuslian.github.io/2022/10/04/leetcode-lcof-40-zui-xiao-de-kge-shu/"/>
    <id>https://octopuslian.github.io/2022/10/04/leetcode-lcof-40-zui-xiao-de-kge-shu/</id>
    <published>2022-10-04T08:23:01.000Z</published>
    <updated>2022-10-06T07:00:11.621Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/problems/zui-xiao-de-kge-shu-lcof/&quot;&gt;剑指 Offer 40. 最小的k个数&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;题意就是从一个整数数组中，取出前k个最小的数。  &lt;/p&gt;
&lt;h1 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h1&gt;&lt;h2 id=&quot;简单直接&quot;&gt;&lt;a href=&quot;#简单直接&quot; class=&quot;headerlink&quot; title=&quot;简单直接&quot;&gt;&lt;/a&gt;简单直接&lt;/h2&gt;</summary>
    
    
    
    <category term="SwordToOffer" scheme="https://octopuslian.github.io/categories/SwordToOffer/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker 搭建 WordPress 网站</title>
    <link href="https://octopuslian.github.io/2022/10/04/docker-deploy-wordpress/"/>
    <id>https://octopuslian.github.io/2022/10/04/docker-deploy-wordpress/</id>
    <published>2022-10-04T03:28:39.000Z</published>
    <updated>2022-10-07T07:44:37.442Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2022/10/04/docker-deploy-wordpress/1.png&quot;&gt;&lt;br&gt;MariaDB 作为后面的关系型数据库，端口号是 3306；WordPress 是中间的应用服务器，使用 MariaDB 来存储数据，它的端口是 80；Nginx 是前面的反向代理，它对外暴露 80 端口，然后把请求转发给 WordPress。  &lt;/p&gt;
&lt;h1 id=&quot;使用-docker-pull-拉取镜像&quot;&gt;&lt;a href=&quot;#使用-docker-pull-拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;使用 docker pull 拉取镜像&quot;&gt;&lt;/a&gt;使用 docker pull 拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull wordpress:5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull mariadb:10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull nginx:alpine&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&quot;启动-MariaDB&quot;&gt;&lt;a href=&quot;#启动-MariaDB&quot; class=&quot;headerlink&quot; title=&quot;启动 MariaDB&quot;&gt;&lt;/a&gt;启动 MariaDB&lt;/h1&gt;</summary>
    
    
    
    <category term="LearnDocker" scheme="https://octopuslian.github.io/categories/LearnDocker/"/>
    
    
    <category term="docker" scheme="https://octopuslian.github.io/tags/docker/"/>
    
    <category term="wordpress" scheme="https://octopuslian.github.io/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建私有镜像仓库-registry</title>
    <link href="https://octopuslian.github.io/2022/10/04/docker-deploy-private-image-repository-registry/"/>
    <id>https://octopuslian.github.io/2022/10/04/docker-deploy-private-image-repository-registry/</id>
    <published>2022-10-04T03:14:52.000Z</published>
    <updated>2022-10-04T06:53:44.380Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文将介绍如何搭建最简单的私有镜像仓库——&lt;code&gt;Docker Registry&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;首先，你需要使用 docker pull 命令拉取镜像：  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker pull registry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后，我们需要做一个端口映射，对外暴露端口，这样 Docker Registry 才能提供服务。它的容器内端口是 5000，简单起见，我们在外面也使用同样的 5000 端口，所以运行命令：  &lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# docker run -d -p 5000:5000 registry&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LearnDocker" scheme="https://octopuslian.github.io/categories/LearnDocker/"/>
    
    
    <category term="docker" scheme="https://octopuslian.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
